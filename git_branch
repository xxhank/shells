#!/usr/bin/env bash

STYLE_BOLD=$(tput bold)
STYLE_UNDERLINE=$(tput sgr 0 1)
STYLE_END=$(tput sgr0)

COLOR_PURPLE=$(tput setaf 171)
COLOR_RED=$(tput setaf 1)
COLOR_GREEN=$(tput setaf 76)
COLOR_TAN=$(tput setaf 3)
COLOR_BLUE=$(tput setaf 38)

header()    { printf "${STYLE_BOLD}${COLOR_PURPLE}==========  %s  ==========${STYLE_END}\n" "$@"; }
arrow()     { printf "➜ \n" "$@";}
success()   { printf "${COLOR_GREEN}✔  %s${STYLE_END}\n" "$@"; }
error()     { printf "${COLOR_RED}✖  %s${STYLE_END}\n" "$@"; }
warning()   { printf "${COLOR_TAN}➜  %s${STYLE_END}\n" "$@"; }
underline() { printf "${STYLE_UNDERLINE}${STYLE_BOLD}%s${STYLE_END}\n" "$@"; }
bold()      { printf "${STYLE_BOLD}%s${STYLE_END}\n" "$@"; }
note()      { printf "${STYLE_UNDERLINE}${STYLE_BOLD}${COLOR_BLUE}Note:${STYLE_END}  ${COLOR_BLUE}%s${STYLE_END}\n" "$@"; }

function die() {
  local -r last_error=${?/#0/1}
  local stack_paths=""
  for ((i = ${#FUNCNAME[@]} - 1;i > 1;i--)); do
      if [[ -z "${stack_paths}" ]]; then
        stack_paths="${FUNCNAME[i-1]}"
      else
        stack_paths="${stack_paths}>${FUNCNAME[i-1]}"
      fi
  done
  error "${stack_paths}:${last_error}> $*" >&2
  exit ${last_error}
}

# 获取管道状态码
# if [[ ${PIPESTATUS[0]} != 0 ]]; then
#   died "build workspace failed"
# fi

IFS=$'\n\t'

trap '[[ -d "${temp_dir}" ]] && rm -r "${temp_dir}"' EXIT SIGHUP SIGINT SIGTERM SIGFPE

#set -o errexit
set -o pipefail

readonly version="1.0.0"
readonly script_path="${BASH_SOURCE[0]}"
readonly script_dir="$( cd "$( dirname "${script_path}" )" && pwd )"
readonly script_name="${script_path##*/}"
readonly script_basename="${script_name%\.*}"

readonly temp_dir=$(mktemp -dt "${script_basename}")
readonly log_file="$HOME/Library/Logs/${script_basename}.log"

# Print usage
usage() {
  cat <<- EOF
  $(bold Usage:) ${script_basename} [OPTION]... action
  a shell template

  $(bold Options:)
    -d, --debug       Runs script in BASH debug mode (set -x)
    -h, --help        Display this help and exit

  $(bold Actions:)
    switch branch [source-branch]
  $(bold Version:)
    ${version}
EOF
  exit "${1:-1}"
}

declare -a args=()
for i in "$@"; do
  #echo $i
  case $i in
      -d|--debug)     debug=true;   shift;;
      -h|--help)      usage 0 >&2;    shift;;

      #-v=*|--value=*) value="${i#*=}"; shift;;
      #--flag) flag=true;   shift;;
      --*=*|-*=*)
        key="${i%=*}"; key=${key//-/}; value="${i#*=}";
        warning "unused: $(bold "$key $value")"
        shift;;
      *)
        args=("${args[@]}" "$i") ;;
  esac
done

if [[ ${debug:false} == true ]]; then
  set -x
  export PS4='+$BASH_SOURCE:$LINENO:$FUNCNAME: '
  trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND?")' DEBUG
else
  set -o nounset
fi

trap 'clean_up' EXIT SIGHUP SIGINT SIGTERM SIGFPE

clean_up(){
   echo -n
}

perform_swicth_branch(){
  BRANCH="${1:-}"
  SOURCE_BRANCH="${2:-}"
  if [[ -z "$BRANCH" ]]; then
      echo "$(basename "$0") $BRANCH"
      exit 1
  fi

  ## 检查本地分支是否存在
  if [[ -n $(git branch --list temp) ]]; then
      git branch -D temp ||:
  fi

  echo "$LINENO"
  git checkout -b temp
  echo "$LINENO"

  if [[ -n $(git branch --list "$BRANCH") ]]; then
      echo "$BRANCH exist in local"
      git reset "$BRANCH"
  fi

  REMOTE=$(git branch -r|grep "$BRANCH"|sed -E -e "s/[[:space:]]//g")
  echo "remote: $REMOTE"
  echo "$LINENO"

  if [[ -n "$REMOTE" ]]; then
      git checkout -B "$BRANCH" --track "$REMOTE"
  else
      if [[ -n "$SOURCE_BRANCH" ]]; then
          git checkout -B "$BRANCH" "${SOURCE_BRANCH}"
      else
          git checkout -B "$BRANCH"
      fi
  fi
  echo "$LINENO"

  CHECKOUT_SUCCESS=$?

  git branch -D temp

  if [[ ${CHECKOUT_SUCCESS} == 0 ]]; then
      git checkout -- .
  else
      echo "checkout failed ${CHECKOUT_SUCCESS}"
  fi
}

export -f perform_swicth_branch
switch_branch(){
    target_branch=${1:-}
    source_branch=${2:-}
    if [[ -z "${target_branch}" ]]; then
      die "need branch name"
    fi
    echo  "$action $target_branch $source_branch"
    if [[ -z "${source_branch}" ]]; then
      #git checkout -B "${target_branch}"
      #git submodule foreach "git checkout -B ${target_branch}"
      perform_swicth_branch "${target_branch}"
      git submodule foreach bash -c "perform_swicth_branch \"${target_branch}\""
    else
      #git checkout -B "${target_branch}" "${source_branch}"
      #git submodule foreach "git checkout -B ${target_branch} ${source_branch}"
      perform_swicth_branch "${target_branch}" "${source_branch}"
      git submodule foreach bash -c "perform_swicth_branch \"${target_branch}\" \"${source_branch}\""
    fi
}

main() {
  action=${args[0]:-}
  if [[ "${action}" == "switch" ]]; then
    switch_branch "${args[1]:-}" "${args[2]:-}"
  else
    usage
  fi
  echo -n
}

main "$@"
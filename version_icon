#!/usr/bin/env bash
#
# 给图标添加版本信息
#
#export LANG=C.UTF-8
LANG=C.UTF-8

STYLE_BOLD=$(tput bold)
STYLE_UNDERLINE=$(tput sgr 0 1)
STYLE_END=$(tput sgr0)

COLOR_PURPLE=$(tput setaf 171)
COLOR_RED=$(tput setaf 1)
COLOR_GREEN=$(tput setaf 76)
COLOR_TAN=$(tput setaf 3)
COLOR_BLUE=$(tput setaf 38)

header()    { printf "${STYLE_BOLD}${COLOR_PURPLE}==========  %s  ==========${STYLE_END}\n" "$@"; }
arrow()     { printf "➜ %s\n" "$@";}
success()   { printf "${COLOR_GREEN}✔ %s${STYLE_END}\n" "$@"; }
error()     { printf "${COLOR_RED}✖ %s${STYLE_END}\n" "$@"; }
warning()   { printf "${COLOR_TAN}➜ %s${STYLE_END}\n" "$@"; }
underline() { printf "${STYLE_UNDERLINE}${STYLE_BOLD}%s${STYLE_END}\n" "$@"; }
bold()      { printf "${STYLE_BOLD}%s${STYLE_END}\n" "$@"; }
note()      { printf "${STYLE_UNDERLINE}${STYLE_BOLD}${COLOR_BLUE}Note:${STYLE_END}  ${COLOR_BLUE}%s${STYLE_END}\n" "$@"; }

function die() {
  local -r last_error=$?
  local stack_paths=""
  for ((i = ${#FUNCNAME[@]} - 1;i > 0;i--)); do
      if [[ -z "${stack_paths}" ]]; then
        stack_paths="${FUNCNAME[i]}"
      else
        stack_paths="${stack_paths}>${FUNCNAME[i]}"
      fi
  done
  error "${stack_paths}:$*(${last_error})" >&2
  clean_up ${last_error}
}

# 获取管道状态码
# if [[ ${PIPESTATUS[0]} != 0 ]]; then
#   died "build workspace failed"
# fi

IFS=$'\n\t'

trap '[[ -d "${temp_dir}" ]] && rm -r "${temp_dir}"' EXIT SIGHUP SIGINT SIGTERM SIGFPE

#set -o errexit
set -o pipefail

readonly version="1.0.0"
readonly script_path="${BASH_SOURCE[0]}"
readonly script_dir="$( cd "$( dirname "${script_path}" )" && pwd )"
readonly script_name="${script_path##*/}"
readonly script_basename="${script_name%\.*}"

readonly temp_dir="$HOME/var/${script_basename}"  # $(mktemp -dt "${script_basename}")
readonly log_file="$HOME/Library/Logs/${script_basename}.log"
mkdir -p "${temp_dir}"

echo "temp dir:${temp_dir}"

# Print usage
usage() {
  cat <<- EOF
  $(bold Usage:) ${script_basename} asset plist appid render|restore CONFIGURATION  build
  a shell template

  $(bold Options:)
    -d, --debug       Runs script in BASH debug mode (set -x)
    -h, --help        Display this help and exit
    asset             程序icon路径
    plist             程序的info.plist 用于获取版本号
    appid             程序标记
    CONFIGURATION     Release or Debug
    render|restor     添加还是还原
    build             程序Build号,为空则自动管理版本号
  $(bold Version:)
    ${version}
EOF
  exit "${1:-0}"
}

declare -a args=()
for i in "$@"; do
  #echo $i
  case $i in
      -d|--debug)     debug=true;   shift;;
      -h|--help)      usage 0 >&2;    shift;;

      # -v=*|--value=*) value="${i#*=}"; shift;;
      # --flag) flag=true;   shift;;
      --*=*|-*=*)
        key="${i%=*}"; key=${key//-/}; value="${i#*=}";
        warning "unused: $(bold "$key $value")"
        shift;;
      *)
        args=("${args[@]}" "$i") ;;
  esac
done

if [[ ${debug:false} == true ]]; then
  set -x
  export PS4='+$BASH_SOURCE:$LINENO:$FUNCNAME: '
  trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND?")' DEBUG
else
  set -o nounset
fi

trap 'clean_up' EXIT SIGHUP SIGINT SIGTERM SIGFPE

clean_up(){
  echo -n #add your clean up code here
}

command_exists() {
  if [ "$(type -P "$1")" ]; then
    return 0
  fi
  return 1
}

# imagemagick tools
IM_CONVERT_EXE="/usr/local/bin/convert"
IM_IDENTIFY_EXE="/usr/local/bin/identify"

# 给图标添加版本信息
# render_info_on_image image-file capation
render_on_image(){
    image="$1"
    capation="$2"

    # 获取图片宽度
    canvas_width=$("${IM_IDENTIFY_EXE}" -format %w "${image}")
    # 文字高度
    canvas_height=$((canvas_width*2/5))
    # 三行
    font_point=$((canvas_height/3))

    if [[ ${canvas_width} -le 60 ]]; then
        # 图片太小
        return
    fi

    if [[ ${font_point} -le 10 ]]; then
        font_point=10 # 设置最小字体为10
        canvas_height=$((font_point*3+3))
         # 绘制
        # shellcheck disable=SC2086
        "${IM_CONVERT_EXE}" \
        -background 'rgba(0,0,0,0.6)' \
        -fill white \
        -size ${canvas_width}x \
        -pointsize ${font_point} \
        -interline-spacing -2 \
        -gravity Center \
        caption:"$capation" \
        "${image}" \
        +swap \
        -gravity south \
        -composite "${image}"
    else
        # 自动适应
        # 绘制
        # shellcheck disable=SC2086
        "${IM_CONVERT_EXE}" \
        -background 'rgba(0,0,0,0.6)' \
        -fill white \
        -size ${canvas_width}x${canvas_height} \
        -interline-spacing -2 \
        -gravity Center \
        caption:"$capation" \
        "${image}" \
        +swap \
        -gravity south \
        -composite "${image}"
    fi

    echo "size: ${canvas_width}x${canvas_height} ${font_point}"
}

# $SRCROOT/shells/version_icon \
# $SRCROOT/Le123PhoneClient/Targets/sdsp/resource/Assets-sdsp.xcassets/AppIcon-sdsp.appiconset \
# $SRCROOT/Le123PhoneClient/Targets/sdsp/sdsp.plist \
# sdsp render $CONFIGURATION

# $SRCROOT/shells/version_icon targets-folder  target render|remove Release|Debug build-number
main() {
    if command_exists "${IM_CONVERT_EXE}"; then
        echo -n
    else
        echo "使用下面的命令安装必须的组件"
        echo "brew install imagemagick"
        echo "brew install ghostscript"
        exit 0
    fi
    FOLDER=${args[0]}
    APPID=${args[1]}
    ASSET="${FOLDER}/${APPID}/resource/Assets-${APPID}.xcassets/AppIcon-${APPID}.appiconset"
    INFOPLIST_FILE="${FOLDER}/${APPID}/${APPID}.plist"

    OP=${args[2]}

    echo "operation: $OP"
    if [[ -z ${CONFIGURATION:-""} ]]; then
        if [[ ${#args[@]} -gt 3 ]]; then
            CONFIGURATION=${args[3]}
        fi
        CONFIGURATION=${CONFIGURATION:-"Debug"}
    fi

    CI_SERVER=false
    # 从上级目录中读取
    BUILD_NUMBER_FILE="${script_dir}/../BUILD_NUMBER"
    if [[ -e BUILD_NUMBER_FILE ]]; then
        BUILD_NUMBER=$(cat "${BUILD_NUMBER_FILE}")
    fi

    # 从环境变量中读取BUILD_NUMBER
    if [[ -z ${BUILD_NUMBER:-""} ]]; then
        # 从参数中读取BUILD_NUMBER
        if [[ ${#args[@]} -gt 4 ]]; then
            BUILD_NUMBER=${args[4]}
        else
            # 读取自动管理的BUILD_NUMBER
            AUTO_BUILD_NUMBER_FILE="$temp_dir/${APPID}.BUILD_NUMBER"
            if [[ -e "$AUTO_BUILD_NUMBER_FILE" ]]; then
                BUILD_NUMBER=$(cat "$AUTO_BUILD_NUMBER_FILE")
            else
                BUILD_NUMBER=1
            fi

            if [[ -z $BUILD_NUMBER ]]; then
                BUILD_NUMBER=1
            fi
            # build号加1,并保存
            BUILD_NUMBER=$((BUILD_NUMBER + 1))
            if [[ "$OP" == "render" ]]; then
                echo $BUILD_NUMBER > "$AUTO_BUILD_NUMBER_FILE"
            fi
        fi
    else
        # jenkins 服务器会提供BUILD_NUMBER
        CI_SERVER=true
    fi

    echo "ci: $CI_SERVER $CONFIGURATION"

    if [[ ! -e "${INFOPLIST_FILE}" ]]; then
        echo "${INFOPLIST_FILE} not exist"
        exit 1
    fi

    # 保存版本号
    if [[ "$OP" == "render" ]]; then
        # 备份plist
        cp -f "${INFOPLIST_FILE}"  "$temp_dir/${APPID}.plist"
        # 默认开发Build号为0
        if [[ $CONFIGURATION != "Release" ]]; then
            /usr/libexec/PlistBuddy -c "Set CFBundleVersion 0" "${INFOPLIST_FILE}"
        fi
    else
        # 还原plist
        cp -f "$temp_dir/${APPID}.plist" "${INFOPLIST_FILE}"
    fi

    COMMIT=$(git rev-parse --short HEAD)
    COMMIT=${COMMIT:0:4}
    NOW=$(date +"%m/%d %H:%M")
    #echo "commit:$COMMIT"
    #echo "build:$BUILD_NUMBER"

    VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "${INFOPLIST_FILE}")
    #echo "version:$VERSION"

    WHO=$(whoami)
    # 拼接图片上的内容
    CAPTION="${VERSION}.${BUILD_NUMBER}-${COMMIT}\n${APPID}-${WHO}\n${NOW}"
    echo "capation:$CAPTION"

    # 备份图片
    BACKUP="${APPID}"
    if [[ "$OP" == "render" ]]; then
        #if [[ ! -d "$temp_dir/$BACKUP" ]]; then
            mkdir -p "$temp_dir/$BACKUP"
            cp  -rf "$ASSET/" "$temp_dir/$BACKUP/"
        #fi
    fi

    # 从备份中复制图片
    cp -rf "$temp_dir/$BACKUP/" "$ASSET/"

    # Release 版本不为图标添加版本信息, ci server 服务器的版本仍然添加
    if [[ $CONFIGURATION == "Release" && "$CI_SERVER" == "false" ]]; then
        exit 0
    fi

    if [[ "$OP" == "render" ]]; then
        while read -r image;do
            # echo "image: $image"
            # echo "caption: $CAPTION"
            render_on_image "$image" "$CAPTION"
        done <<< "$(find "$ASSET" -name "*.png")"
    fi
}

main "$@"
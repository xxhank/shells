#!/usr/bin/env ruby
#-w warning
require 'optparse'
require 'xcodeproj'

options = {}

parser = OptionParser.new do|opts|
    opts.banner = "Usage: #{File.basename(__FILE__)}  directory  project  sufix "

    # opts.on('-proj project', '--project project', 'Project') do |project|
    #     options[:project] = project;
    # end

    # opts.on('-dir directory', '--directory directory', 'Directory') do |directory|
    #     options[:directory] = directory;
    # end

    # opts.on('-s sufix', '--sufix sufix', 'Sufix') do |sufix|
    #     options[:sufix] = sufix;
    # end

    opts.on('-h', '--help', 'Displays Help') do
        puts opts
        exit
    end
end

parser.parse!

ROOT = ARGV[0]  # File.dirname(__FILE__)
PROJNAME=ARGV[1]
SUFFIX=ARGV[2]
puts ROOT
puts PROJNAME
# exit 0
project = Xcodeproj::Project.open("#{ROOT}/#{PROJNAME}.xcodeproj")

main_target = nil
unittest_target = nil
project.native_targets.each do |target|
  # puts "#{target.name} #{target.product_name} #{target.product_type}"
  main_target = target if target.product_type.end_with?("application")
  unittest_target = target if target.product_type.end_with?("unit-test")
end

unittest_group=nil
project.groups.each do |group|
    unittest_group = group if group.display_name == unittest_target.name
end

if unittest_target.nil? || unittest_group.nil?
    puts "can not find any unit-test target"
    exit 0
end
# puts main_target
# puts unittest_target

source_files = main_target.source_build_phase.files.to_a.map do |pbx_build_file|
      if pbx_build_file.file_ref.nil?
            ""
      elsif pbx_build_file.file_ref.kind_of? String
            pbx_build_file.file_ref
      else
            pbx_build_file.file_ref.real_path.to_s
    end
end.select do |path|
  path.end_with?(".m", ".mm", ".swift")
end.select do |path|
  File.exists?(path)
end

unittest_source_files = unittest_target.source_build_phase.files.to_a.map do |pbx_build_file|
     if pbx_build_file.file_ref.nil?
            ""
      elsif pbx_build_file.file_ref.kind_of? String
            pbx_build_file.file_ref
      else
            pbx_build_file.file_ref.real_path.to_s
    end
end.select do |path|
  path.end_with?(".m", ".mm", ".swift")
end.select do |path|
  File.exists?(path)
end

unittest_names = []
unittest_source_files.each do |file|
  filename = File.basename(file, ".*")
  unittest_names.push(filename)
end

untest_names = []
source_files.each do |file|
  filename = File.basename(file, ".*")
  filename = filename + "Tests"
  untest_names.push(filename) if nil == unittest_names.index { |x| x == filename }
end

testcase_template=<<-EOM
//
//  {CASE_NAME}.m
//  {PROJECT_NAME}
//
//  Created by {USER} on {CASE_DATE}..
//  Copyright © 2017年 Beijing Ninety Culture Co.ltd. All rights reserved.
//

#import <XCTest/XCTest.h>
#import <Expecta/Expecta.h>
#import <OCMock/OCMock.h>
#import <Specta/Specta.h>
#import <OHHTTPStubs/OHHTTPStubs.h>


@interface {CASE_NAME} : XCTestCase

@end

@implementation {CASE_NAME}

- (void)setUp {
    [super setUp];
    // Put setup code here. This method is called before the invocation of each test method in the class.
}

- (void)tearDown {
    // Put teardown code here. This method is called after the invocation of each test method in the class.
    [super tearDown];
}

- (void)testExample {
    // This is an example of a functional test case.
    // Use XCTAssert and related functions to verify your tests produce the correct results.
    XCTAssertTrue(NO, @"Oh, please test me.");
}

@end
EOM
# testcase_template=<<-EOM
# //
# //  {CASE_NAME}.swift
# //  {PROJECT_NAME}
# //
# //  Created by {USER} on {CASE_DATE}.
# //  Copyright © 2016年 wangchao9. All rights reserved.
# //

# import XCTest
# import Nimble
# @testable import {PROJECT_NAME}

# class {CASE_NAME}: XCTestCase {

#     override func setUp() {
#         super.setUp()
#     }

#     override func tearDown() {
#         super.tearDown()
#     }

#     func testCase() {
#         XCTAssertTrue(false)
#     }
# }
# EOM

testcase_root="#{ROOT}/#{unittest_target.name}"

exit 0 if untest_names.count == 0

puts "add missing tests"
untest_names.each do |name|
    testcase_content = testcase_template
    .gsub("{CASE_NAME}",name.gsub("+","_"))
    .gsub("{PROJECT_NAME}", main_target.name)
    .gsub("{CASE_DATE}", Time.new().strftime("%Y/%m/%d"))
    .gsub("{USER}", ENV['USER'])
    # puts  testcase_content
    testcase_file = "#{testcase_root}/#{name}.#{SUFFIX}"
    puts testcase_file
    File.write(testcase_file, testcase_content)

    file_reference, version = Xcodeproj::Project::Object::FileReferencesFactory.new_reference(unittest_group, "#{name}.#{SUFFIX}", "<group>")
    file_references = [file_reference]
    unittest_target.add_file_references(file_references)
end

project.save
